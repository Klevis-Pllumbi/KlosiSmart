package com.klevispllumbi.klosismart.service;

import org.springframework.http.*;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;

@Service
public class OpenAiService {

    private final String apiKey = System.getenv("OPENAI_API_KEY");
    private final String url = "https://api.openai.com/v1/chat/completions";

    private final Map<String, List<Map<String, String>>> sessionHistory = new ConcurrentHashMap<>();

    private final int MAX_HISTORY = 5; // limit mesazhesh pÃ«r kontekst

    public String askQuestion(String sessionId, String userQuestion) {
        RestTemplate restTemplate = new RestTemplate();

        // ğŸ”¹ Prompt i fuqishÃ«m pÃ«r tÃ« kufizuar fushÃ«n e chatbot-it
        String systemPrompt = """
    Ti je njÃ« asistent virtual i specializuar pÃ«r qytetarÃ«t shqiptarÃ«.
    QÃ«llimi yt Ã«shtÃ« t'u japÃ«sh udhÃ«zime praktike, tÃ« sakta dhe tÃ« pÃ«rditÃ«suara
    mbi administratÃ«n publike, shÃ«rbimet shtetÃ«rore, qeverisjen vendore,
    si dhe Ã§Ã«shtje qÃ« lidhen me politikat publike dhe pÃ«rdorimin e fondeve shtetÃ«rore nÃ« ShqipÃ«ri.

    UdhÃ«zimet:
    - Jep gjithmonÃ« hapa praktikÃ« (step by step).
    - NÃ«se ekziston njÃ« shÃ«rbim online (p.sh. e-Albania), jep linkun pÃ«rkatÃ«s.
    - NÃ«se pyetja kÃ«rkon informacion tÃ« pÃ«rditÃ«suar (p.sh. oraret e shÃ«rbimeve, ligje tÃ« reja, buxhetet vjetore),
      pÃ«rdor aftÃ«sinÃ« pÃ«r tÃ« kÃ«rkuar nÃ« web.
    - Mund tÃ« shpjegosh edhe tÃ« dhÃ«na mbi financat publike, fondet shtetÃ«rore,
      ose sektorÃ« specifikÃ« tÃ« mbÃ«shtetur nga qeveria (p.sh. shÃ«ndetÃ«sia, arsimi).
    - Mos u pÃ«rgjigj pÃ«r tema krejtÃ«sisht jashtÃ« administratÃ«s publike dhe qeverisjes
      (p.sh. kÃ«shilla personale, teknologji tÃ« pa lidhura, receta gatimi).
      NÃ«se pyetja Ã«shtÃ« jashtÃ« fushÃ«s, pÃ«rgjigju me:
      "MÃ« vjen keq, unÃ« ofroj vetÃ«m informacion mbi administratÃ«n, shÃ«rbimet publike dhe politikat shtetÃ«rore."
    - PÃ«rgjigju gjithmonÃ« nÃ« gjuhÃ«n shqipe.
""";

        // ğŸ”¹ Merr historikun ekzistues ose krijo tÃ« ri
        List<Map<String, String>> history = sessionHistory.getOrDefault(sessionId, new ArrayList<>());

        // ğŸ”¹ Shto pyetjen e re nÃ« history
        history.add(Map.of("role", "user", "content", userQuestion));

        // ğŸ”¹ Mbaj vetÃ«m 5 mesazhet e fundit
        if (history.size() > MAX_HISTORY) {
            history = history.subList(history.size() - MAX_HISTORY, history.size());
        }

        sessionHistory.put(sessionId, history);

        // ğŸ”¹ NdÃ«rto listÃ«n e mesazheve pÃ«r OpenAI
        List<Map<String, String>> messagesForApi = new ArrayList<>();
        messagesForApi.add(Map.of("role", "system", "content", systemPrompt));
        messagesForApi.addAll(history);

        Map<String, Object> requestBody = Map.of(
                "model", "gpt-4.1",
                "messages", messagesForApi,
                "temperature", 0.4
        );

        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.APPLICATION_JSON);
        headers.setBearerAuth(apiKey);

        HttpEntity<Map<String, Object>> entity = new HttpEntity<>(requestBody, headers);

        ResponseEntity<Map> response = restTemplate.exchange(url, HttpMethod.POST, entity, Map.class);

        try {
            List<Map<String, Object>> choices = (List<Map<String, Object>>) response.getBody().get("choices");
            if (choices != null && !choices.isEmpty()) {
                Map<String, Object> message = (Map<String, Object>) choices.get(0).get("message");
                String botAnswer = (String) message.get("content");

                // ğŸ”¹ Shto pÃ«rgjigjen e bot-it nÃ« historik
                history.add(Map.of("role", "assistant", "content", botAnswer));
                if (history.size() > MAX_HISTORY) {
                    history = history.subList(history.size() - MAX_HISTORY, history.size());
                }
                sessionHistory.put(sessionId, history);

                return botAnswer;
            } else {
                return "Nuk mora dot pÃ«rgjigje nga modeli.";
            }
        } catch (Exception e) {
            e.printStackTrace();
            return "Gabim gjatÃ« marrjes sÃ« pÃ«rgjigjes.";
        }
    }
}
